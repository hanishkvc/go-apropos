#############
Go Apropos
#############
HanishKVC, 2022

Overview
#########

go doc requires one to already know the standard package to look for,
to get info about the same. However if one doesnt know which package
may contain what they want, they will have to grep the src directory
or do a web search.

This provides something like the apropos command wrt man pages, but
here it searchs for matching symbols/comments/packagenames from among
the packages in the go source directory.

NOTE: Symbol refers to const or var or type or func name.

As I wanted to look at Go lang a bit, so found this need and thus this.
However I havent really looked at Go or read through Go documentation,
so this code could be as far away from the conventions and concepts in
Go land. This is based on some quick random scanning of docs and go src
followed by compilation errors and potentially flawed logical guess work.

Usage
######

By default it uses 1st directory under /usr/share or /usr/local/share
which matchs the pattern "go-*" as the go source directory wrt packages
to search for. If required one can explicitly set the source directory
by using the cmdline arg

	goapropos --basepath <base_path> search_token

One can specify the token to use to match / search for symbols in
packages by using either the cmdline arg --find or by just specifing
it in the cmdline ie.

	goapropos --find search_token

	OR

	goapropos search_token

By default it tries to find matching exported symbols only from available
packages. However If one wants the logic to use both internal and exported
symbols of the packages when trying to find a match, one needs to specify
the cmdline argument --allsymbols.

	goapropos --allsymbols search_token

By default it tries to search through all the packages in the identified
go source directory. However if required one can filter the packages that
will be searched by using --findpkg argument. The  token given through
findpkg argument will be used to filter the package names for a match.

	goapropos --findpkg packagename_token search_token

If one wants to get a list of package names, which match a given token, one
can run goapropos with only the findpkg argument and no find argument.

	goapropos --findpkg packagename_token

To get all the exported symbols of all the packages, use

	goapropos --find ""

If one wants to find symbols based on their comments if any, then they can
use --findcmt to specify a match token wrt comment. Any symbols which contain
comments that match the specified token will be shown to the user.

	goapropos --findcmt a_search_token
	ex: goapropos --findcmt "device"

The tokens specified are used to match package name or the symbols or their
comments as the case maybe by using a case insensitive search, by default.
If one wants to use case sensitive matching, pass --casesensitive.

By default if the package name or symbol or comment contains the given token,
as a substring within itself, it will be treated as a match. This is called
the contains matchmode. However if required one can use regular expression
based matching by specifying --matchmode regexp. If the specified mode is
unknown, then contains matchmode will be used as the fallback.

NOTE: by default the match tokens as well as the pkg names/symbols/comments
will be converted to upper case if casesensitive search is disabled (which
is the default). Any implications of this wrt regexp if any needs to be
kept in mind. Inturn enablign casesensitive searching will disable this
automatic upper case conversion and inturn will leave the match token,
as well as the pkg names and symbols and comments as it is.

One can skip files matching certain predefined substrings in their name or
path  by using one of the following arguments

	--skipsrccmd=true (skip files containing /src/cmd/ in their path)

	--skipsrcinternal=true (skip files containing /src/internal/ in them)

	--skipfiles "substring" (skip files containing substring in their path)


Remember to pass the named arguments/flags before any unnamed args to the
program.

TODO
######

DONE: A optional simple regular expression based token matching option has
been added.

DONE: Allow searching through package / identifier comments, if possible. Have
added logic to extract comments at a basic level. TODO: Comments at the block
level wrt const or var containing multiple definitions needs to be accounted.

Maybe simplify by using parseDir on dirs and no need to look at the src files
individually seperately. However this may not skip test go source files in
them, parsing of which can be avoided by walking through files and calling
parseFile on them, like current flow. THink of this later.

Maybe add support to cache the package+identifiers map. This will inturn
require a cmdline argument to force rebuilding of this cache, when required.

Maybe later add support for searching multiple different comment tokens and
or symbol tokens. Currently one can search for either a single symbol or
single comment or one symbolORcomment match tokens together.

Note
######

AST and Parsing
=================

From a initial quick glance at golang source found go/ast and its Inspect
function. Inturn to feed Inspect found parser.parseFile to parse go source
files.

However on using them found that no package ast node or comment related nodes
(comment/commentgroup) was getting found at any level, by looking at the call
back function of Inspect. Then there was also that mode argument to parseFile
which I had not yet looked at.

From another quick glance at source files in go/ast, go/doc and go/parser,
as also looking at go doc parser I can see a parser.parseDir, which seems to
return package nodes (as a given source directory could have multiple pkgs).
Also found bits about the Mode type and inturn ParseComments.


